<!-- snippets/component__product-featured-item.liquid -->
{% comment %} 
  This snippet is used to display a product thumbnail with four product photos. It accepts a liquid product object as an argument.
  
  Accepts:
  - product: {Object} The liquid product object containing all the product details.
  Usage:
    {% render 'component__product-featured-item', 
      product: product
    %}
    
  Globals:
  - enable_animations: {boolean} Enables animations if set to true.
  - product_card_border_style: {string} Sets the border style of thumbnails.
  - product_card_color_border: {string} Sets the border color.
  - product_card_color_scheme: {string} Sets the color scheme of thumbnails.
  - product_card_title_capitilization: {string} Sets the capitilization for thumbnail titles.
  - product_card_title_font: {string} Sets the font family for titles.
  - type_seperator: {string} Sets the type of seperator between text.
  - product_card_enable_type: {boolean} Displays product type if set to true.
  - product_card_enable_vendor: {boolean} Displays vendor if set to true.
  - product_card_enable_count: {boolean} Displays variant count if set to true.
  
  Recommendations:
  - This snippet is best used while looping through products, for example on collection product grids. It provides a consistent way to display product information across different sections of the site.
{% endcomment %}

{% liquid

  if settings.enable_collection_url
    assign url = product.url | within: collection
  else
    assign url = product.url
  endif

  capture badge_background
    if settings.product_card_badge_scheme == "light_outline" or settings.product_card_badge_scheme == "dark_outline"
      echo "trasnsparent"
    else
      echo settings.product_card_badge_scheme
    endif
  endcapture
  
  capture badge_foreground
    if settings.product_card_badge_scheme == "light_outline"
      echo "light"
    elsif settings.product_card_badge_scheme == "dark_outline"
      echo "dark"
    else
      echo settings.product_card_badge_scheme
    endif
  endcapture

%}

{% capture product_badges %}
  <div 
    class="absolute top-0 left-0 z-10 flex flex-wrap w-full gap-2 p-4 whitespace-normal">
    
    {% comment %} Stock count {% endcomment %}
    {% if settings.product_card_stock_threshold %}
      {% assign product_qty = 0 %}
      {% for variant in product.variants %}
        {% if variant.inventory_quantity > 0 %}
          {% assign product_qty = product_qty | plus: variant.inventory_quantity %}
        {% endif %}
      {% endfor %}
      {% if product_qty < settings.product_card_stock_threshold and product_qty > 0 %}
        {% capture badge %}
          <span class="inline-flex w-2 h-2 mr-2">
            <span class="absolute inline-flex w-2 h-2 bg-current bg-opacity-50 rounded-full animate-ping"></span>
            <span class="inline-flex w-2 h-2 bg-current bg-opacity-50 rounded-full"></span>
          </span>
          <span>{{ product_qty }} {{ 'info.in_stock' | t | downcase }}</span>
        {% endcapture %}
        {% render 'component__badge', 
          background: badge_background,
          text: badge_foreground,
          border: badge_foreground,
          content: badge 
        %}
      {% endif %}
    {% endif %}

    {% comment %} Savings {% endcomment %}
    {% if settings.product_card_savings_badge != "none" %}
      {% if product.price < product.compare_at_price %}
        {% if settings.product_card_savings_badge == "percent" %}
          {% capture badge_content %}{{ discount_percentage }}{% endcapture %}
          {% capture a %}{{ product.compare_at_price | minus: product.price }} {% endcapture %}
          {% capture b %}{{ a | times: 100 }} {% endcapture %} 
          {% capture discount_percentage %}{{ b | divided_by: product.compare_at_price | round }} {% endcapture %} 
          {% capture badge_content %} {{ 'labels.save' | t }} {{ discount_percentage | strip | append: '%' }} {% endcapture %}
        {% else %}
          {% capture discount_amount %}{{ product.compare_at_price | minus: product.price }}{% endcapture %}
          {% capture badge_content %}
            {{ 'labels.save' | t }} {% render 'component__format-price', price: discount_amount %}
          {% endcapture %}
        {% endif %}
        {% render 'component__badge', 
          background: badge_background,
          text: badge_foreground,
          border: badge_foreground,
          content: badge_content %}
      {% endif %}
    {% endif %}
    
    {% comment %} Rating {% endcomment %}
    {% if settings.product_card_enable_review_badge %}
      {% if product.metafields.reviews.rating.value != blank %}
        {% capture badge_content %}
          {% assign rating = product.metafields.reviews.rating.value | strip %}
          {{ rating | times: 1 | round: 2 }}
          {% render 'component__icon', icon: 'star-fill', size: '12', class: 'ml-1' %} 
        {% endcapture %}
        {% render 'component__badge', 
          background: badge_background,
          text: badge_foreground,
          border: badge_foreground,
          content: badge_content %}
      {% endif %}
    {% endif %}

    {% comment %} Tags {% endcomment %}
    {% for tag in product.tags %}
      {% if tag contains "badge_" %}
        {% capture badge_content %}{{ tag | remove: "badge_" }}{% endcapture %}
        {% render 'component__badge', 
          background: badge_background,
          text: badge_foreground,
          border: badge_foreground,
          content: badge_content %}
      {% endif %}
    {% endfor %}
    
    {% comment %} Metafields {% endcomment %}
    {% assign metafield = product.metafields.custom.badge %}
    {% if metafield %}
      {% capture badge_content %}{{ metafield }}{% endcapture %}
      {% render 'component__badge',
        background: badge_background,
        text: badge_foreground,
        border: badge_foreground,
        content: badge_content %}
    {% endif %}
    
  </div>
{% endcapture %}

{% capture product_images %}
  <a href="{{ url }}"
    class="
      grid grid-cols-4 {{ settings.product_card_color_border }} 
      {% if settings.product_card_border_style == 'image' %}
        border--radius overflow-clip
      {% endif %}
    "
    style="
      gap: {{ settings.border_element_width }}px;
    ">
    <div class="grid w-full col-span-3 col-start-1">
      <div class="overflow-clip">
        {% unless product.featured_image == blank %}
          {% render 'component__image', 
            image: product.featured_image,
            max_width: 1600,
            background_class: 'color__bg-shade-2',
            image_class: 'w-full',
            ratio_class: settings.product_card_ratio,
            crop_class: 'object-cover',
            enable_lazy_load: true,
            enable_2x: true
          %}
        {% endunless %}
      </div>
    </div>
    <div class="grid items-stretch w-full col-start-4"
      style="
        gap: {{ settings.border_element_width }}px;
      ">
      {% if product.images[1] == blank %}
        {% assign image1 = product.images[0] %}
      {% else %}
        {% assign image1 = product.images[1] %}
      {% endif %}
      <div class="overflow-clip {{ settings.product_card_color_border }}">
        {% render 'component__image', 
          image: image1,
          max_width: 200,
          background_class: 'color__bg-shade-2',
          image_class: 'w-full',
          ratio_class: settings.product_card_ratio,
          crop_class: 'object-cover',
          enable_lazy_load: true,
          enable_2x: true
        %}
      </div>
      {% if product.images[2] == blank %}
        {% assign image2 = product.images[0] %}
      {% else %}
        {% assign image2 = product.images[2] %}
      {% endif %}
      <div class="overflow-clip {{ settings.product_card_color_border }}">
        {% render 'component__image', 
          image: image2,
          max_width: 200,
          background_class: 'color__bg-shade-2',
          image_class: 'w-full',
          ratio_class: settings.product_card_ratio,
          crop_class: 'object-cover',
          enable_lazy_load: true,
          enable_2x: true
        %}
      </div>
      {% if product.images[3] == blank %}
        {% assign image3 = product.images[0] %}
      {% else %}
        {% assign image3 = product.images[3] %}
      {% endif %}
      <div class="overflow-clip {{ settings.product_card_color_border }}">
        {% render 'component__image', 
          image: image3,
          max_width: 200,
          background_class: 'color__bg-shade-2',
          image_class: 'w-full',
          ratio_class: settings.product_card_ratio,
          crop_class: 'object-cover',
          enable_lazy_load: true,
          enable_2x: true
        %}
      </div>
    </div>
  </a>
{% endcapture %}

{% capture product_title %}
  <h3 
    class="
      {{ settings.product_card_title_capitilization }}
      {{ settings.product_card_title_font }}
    ">
    {{ product.title }}
  </h3>
{% endcapture %}

{% capture product_rating %}
  {% if settings.product_card_enable_review_text %}
    {% assign rating = product.metafields.reviews.rating.value.rating | times: 1 %}
    {% assign rating_floor = rating | floor %}
    {% assign max = product.metafields.reviews.rating.value.scale_max | floor %}
    {% if product.metafields.reviews.rating.value != blank %}
      <div class="flex items-center gap-0.5">
        {% liquid 
          for iteration in (1..max)
            if iteration <= rating_floor
              render 'component__icon', icon: 'star-fill', size: '16', class: ''
            endif
          endfor 
          assign rating_string = rating | append: ""
          unless rating_string contains '.0'
            render 'component__icon', icon: 'star-half', size: '16', class: ''
          endunless
        %}
        <span class="opacity-50 type--smaller">({{ product.metafields.reviews.rating_count }})</span>
      </div>
    {% endif %}
  {% endif %}
{% endcapture %}

{% capture product_tagline %}
  {% if settings.product_card_enable_tagline and product.metafields.descriptors.subtitle %}
    <p class="type--small">
      {{ product.metafields.descriptors.subtitle }}
    </p>
  {% endif %}
{% endcapture %}

{% capture product_swatches %}
  {% if settings.product_card_enable_swatches %}
    {% for product_option in product.options_with_values %}
      {% assign color =  'labels.color' | t | downcase %}
      {% assign downcase_option_name = product_option.name | downcase %}
      {% if 
        downcase_option_name == color or 
        downcase_option_name == "colour" or
        downcase_option_name == "color" or
        downcase_option_name == "colore" or
        downcase_option_name == "farbe" or
        downcase_option_name == "couleur" 
      %}
        <div 
          class="
            flex flex-wrap w-full gap-1 items-center
            {% if settings.product_card_alignment == "center" %}
              text-center justify-center
            {% endif %}
            {% if settings.product_card_alignment == "right" %}
              text-right justify-end
            {% endif %}
          ">
          {% for value in product_option.values limit: 6 %}
            {% capture swatch_image_filename %}swatch-{{ value | handle }}.jpg{% endcapture %}
            {% assign swatch_image = images[swatch_image_filename] %}
            <div 
              class="flex !w-3 !h-3 bg-center border__button--radius color__bg-shade-2"
              style="
                background-color: {{ value | handle }};
                {% if swatch_image contains '.jpg' %}
                  background-image: url('{{ swatch_image | image_url: width: 32 }}');
                {% endif %}
              "
              {% for variant in product.variants %}
                {% if value contains variant.title and variant.featured_image %}
                  @mouseover="second_image='{{ variant.featured_image | image_url: width: 1600 }}'"
                {% endif %}
              {% endfor %}>
            </div>
          {% endfor %}
          {% if product_option.values.size > 6 %}
            {% assign remaining = product_option.values.size | minus: 6 %}
            <span class="opacity-50 type--smaller">+{{ remaining }}</span>
          {% endif %}
        </div>
      {% endif %}
    {% endfor %}
  {% endif %}
{% endcapture %}

{% capture product_price_and_add %}
  <div 
    class="
      flex gap-1 items-start min-w-[33%] flex-wrap
      {% if settings.product_card_alignment == "center" %}
        text-center justify-center
      {% endif %}
      {% if settings.product_card_alignment == "right" %}
        text-right justify-end
      {% endif %}
      {% if settings.product_card_alignment == "justified" %}
        justify-end items-end text-right flex-col
      {% else %}
        w-full
      {% endif %}
    ">

    {% comment %} Unit price {% endcomment %}
    {% if settings.product_card_show_prices %}
      {% if product.selected_or_first_available_variant.unit_price %}
        <span class="type--smaller opacity-50 w-full
          {% if settings.product_card_alignment == "center" %}
            justify-center
          {% endif %}
          {% if settings.product_card_alignment == "right" or settings.product_card_alignment == "justified" %}
            justify-end
          {% endif %}">
          {% render 'component__format-price', price: product.selected_or_first_available_variant.unit_price %} /
          {{ product.selected_or_first_available_variant.unit_price_measurement.reference_value }}
          {{ product.selected_or_first_available_variant.unit_price_measurement.reference_unit }}
        </span>
      {% endif %}
    {% endif %}
    
    {% comment %} Prices {% endcomment %}
    {% if settings.product_card_show_prices %}
      <div 
        class="shrink">

        {% comment %} Price {% endcomment %}
        <div 
          class="
            flex flex-wrap items-center gap-1
            {% if settings.product_card_alignment == "center" %}
              justify-center
            {% endif %}
            {% if settings.product_card_alignment == "right" or settings.product_card_alignment == "justified" %}
              justify-end
            {% endif %}
          ">

          {% comment %} Starting price {% endcomment %}
          <span>
            {% if product.price_varies and settings.price_range == "show_starting_price" %}
              <span>
                {{ 'labels.from' | t }}
              </span>
            {% endif %}
            {% render 'component__format-price', price: product.price_min %}
          </span>

          {% comment %} If showing range {% endcomment %}
          {% if product.price_varies and settings.price_range == "show_range" %}
            <span>
              - 
              {% render 'component__format-price', price: product.price_max %}
            </span>
          {% endif %}

          {% comment %} Sale price {% endcomment %}
          {% if product.compare_at_price_max > 0 %}
            <span class="opacity-50">
              <s>
                {% render 'component__format-price', price: product.compare_at_price_max %}
              </s>
            </span>
          {% endif %}
        </div>

      </div>
    {% endif %}

    {% comment %} Quick add {% endcomment %}
    {% if settings.product_card_show_prices and settings.product_card_alignment != 'justified' %}
      <span 
        class="
          {% if settings.product_card_alignment == "left" or settings.product_card_alignment == "justified" %}
            md:opacity-0 group-hover/product:opacity-100 animation-300
          {% endif %}
          {% unless settings.enable_quick_mobile %}
            hidden md:flex
          {% endunless %}
          {% unless settings.enable_quick_desktop %}
            md:hidden
          {% endunless %}
        ">-</span>
    {% endif %}
    <div 
      class="
        {% if settings.product_card_alignment == "left" or settings.product_card_alignment == "justified" %}
          md:opacity-0 group-hover/product:opacity-100 group-focus-within/product:opacity-100 animation-300
        {% endif %}
        {% unless settings.enable_quick_mobile %}
          hidden md:flex
        {% endunless %}
        {% unless settings.enable_quick_desktop %}
          md:hidden
        {% endunless %}
      ">
      <form 
        action="/cart/add" 
        method="post" 
        enctype="multipart/form-data"
        x-data="{
          current_variant_id: {{ product.variants[0].id | default: 0 }},
          current_variant_selling_plan_id: 0,
          quantity: 1,
        }"
        @submit.prevent="
          button_loading = true; 
          addCartItem(current_variant_id, current_variant_selling_plan_id, quantity, true); 
          setTimeout(function(){ button_loading = false}, 500);
        ">
    
        {% comment %} Add to cart {% endcomment %}
        {% if product.has_only_default_variant and product.selected_or_first_available_selling_plan_allocation == nil %}
          <input 
            name="id" 
            type="hidden"
            :value="current_variant_id">
          <label 
            class="sr-only"
            for="quantity_c_product_item_{{ product.variants[0].id }}-{{ section.id }}">
            {{ 'labels.quantity' | t }}
          </label>
          <input 
            id="quantity_c_product_item_{{ product.variants[0].id }}-{{ section.id }}"
            name="quantity" 
            type="hidden" 
            value="1" 
            min="1"
            max="" 
            x-model="quantity">
          <button 
            :class="{
              'animate-pulse': button_loading
            }"
            type="submit" 
            role="button">
            <div 
              class="btn__content">
              {{ 'actions.add_to_cart' | t }}
            </div>
          </button>

        {% comment %} Open quick add overlay {% endcomment %}
        {% else %}
          <button 
            :class="{
              'animate-pulse': button_loading
            }"
            type="button" 
            role="button"
            @click="
              button_loading = true; 
              fetchAndRenderQuickAdd('{{ product.handle }}');
              setTimeout(function(){ button_loading = false}, 500);
            ">
            <div 
              class="btn__content">
              {{ 'actions.add_to_cart' | t }}
            </div>
          </button>
        {% endif %}

      </form>
    </div>
    
  </div>
{% endcapture %}

<div class="
    group/product relative w-full focus-within:border--focus
    {% if settings.product_card_border_style == 'thumbnail' %}
      border--radius overflow-clip
      {{ settings.product_card_color_border }} 
      {{ settings.product_card_color_scheme }} 
    {% endif %}
  "
  x-data="{ 
    button_loading: false
  }">
  {{ product_badges }} 
  {{ product_images }}
  
  {% comment %} Content {% endcomment %}
  <div
    class="
      hover:no-underline no-underline whitespace-normal flex justify-between items-start py-4 gap-1
      {% if settings.product_card_alignment == "center" %}
        text-center
      {% endif %}
      {% if settings.product_card_alignment == "right" %}
        text-right
      {% endif %}
      {% unless settings.product_card_alignment == "justified" %}
        flex-wrap
      {% endunless %}
      {% if settings.product_card_border_style == "thumbnail" %}
        px-4
      {% endif %}
    ">
    <div 
      class="
        grow flex gap-1 flex-col
        {% if settings.product_card_alignment == "center" %}
          items-center
        {% endif %}
        {% if settings.product_card_alignment == "right" %}
          items-end
        {% endif %}
        {% unless settings.product_card_alignment == "justified" %}
          w-full
        {% endunless %}
      ">
      {{ product_rating }}
      {{ product_title }}
      {{ product_tagline }}
    </div>
    {{ product_price_and_add }}
    {{ product_swatches }}
  </div>

  
</div>