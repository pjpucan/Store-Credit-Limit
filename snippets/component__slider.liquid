<!-- snippets/component__slider.liquid -->
{% comment %} 
  This is a standard slider component used for displaying a series of items in a scrollable horizontal layout. It is highly customizable with several options for tailoring its appearance and behavior.

  Accepts:
  - container_class: {string} This is a string that sets the classes for the slider container. It allows for custom styling of the slider container.
  - slider_size: {integer} This sets the size of the slider. It determines how many items are within the slider.
  - slides: {Object} Object that contains all the slide items. Each item represents a single slide in the slider.
  - enable_arrows_over: {boolean} This indicates whether alternative arrows should be used for navigation. If set to true, alternative arrow styles will be used.
  - enable_indicators: {boolean} This indicates whether slider indicators are shown.
  - enable_indicators_desktop: {boolean} This indicates whether slider indicators are shown on desktop.
  - enable_indicators_under: {boolean} This indicates whether slider indicators are shown under the slider.
  - enable_default_gap: {boolean} This indicates whether the default gap should be used. Set to true to use gap-4 instead of setting.gap_size.
  
  Usage:
    {% capture slides %}
      {% for block in section.blocks %}
        ...
      {% endfor %}
    {% endcapture %}
    {% render 'component__slider',
      container_class: 'px-4',
      slider_size: section.blocks.size,
      slides: slides,
      enable_arrows_over: false,
      enable_indicators: false,
      enable_indicators_desktop: true,
      enable_indicators_under: true,
      enable_default_gap: true
    %} 

  Recommendations:
  - Use this snippet when you need to display a series of items in a horizontal scrollable layout. It is especially useful for product or image galleries.
  - Customize the appearance of the slider by passing in custom classes through the 'container_class' parameter.
  - Enable alternative arrow styles for a different look and feel by setting 'enable_arrows_over' to true.
{% endcomment %}

<div 
  class="relative flex flex-wrap"
  x-data="{
      
    index: 0, // the current active slide
    show_arrows: false, // hide arrows by default

    // check if slider extends width
    isOverflown(element) {
      return element.scrollWidth > element.clientWidth;
    },

    // scroll to a specific item
    scrollToIndex(indexToScroll) {
      this.index = indexToScroll;
      let slider = this.$refs.slider;
      let currentSlide = slider.querySelector('[data-slide=&quot;' + indexToScroll + '&quot;]');
      if (currentSlide) {
        let sliderWidth = slider.offsetWidth;
        let currentSlidePosition = currentSlide.offsetLeft;
        let currentSlideWidth = currentSlide.offsetWidth;
        let centerPosition = currentSlidePosition + currentSlideWidth / 2 - sliderWidth / 2;
    
        slider.scrollTo({
          top: 0,
          left: centerPosition,
          behavior: 'smooth'
        });
      }
    },

    // scroll to next item
    scrollNext() {
      let slider = this.$refs.slider;
      let nextScrollPosition = slider.scrollLeft + slider.clientWidth;
      if (nextScrollPosition >= slider.scrollWidth - 20) {
        nextScrollPosition = 0;
      }
      slider.scrollTo({
        top: 0,
        left: nextScrollPosition,
        behavior: 'smooth'
      });
    },
    
    // scroll to previous item
    scrollBack() {
      let slider = this.$refs.slider;
      let previousScrollPosition = slider.scrollLeft - slider.clientWidth;
      if (slider.scrollLeft <= 20) {
        previousScrollPosition = slider.scrollWidth - slider.clientWidth;
      }
      slider.scrollTo({
        top: 0,
        left: previousScrollPosition,
        behavior: 'smooth'
      });
    }

  }">
  <div 
    class="relative flex w-full group">

    {% comment %} Default arrows {% endcomment %}
    {% unless enable_arrows_over %}
      <div 
        class="absolute z-20 justify-end hidden w-full gap-4 opacity-0 bottom-full md:flex animation-300 top-4 right-4 group-hover:opacity-100 focus-within:opacity-100"
        x-show="show_arrows"
        x-cloak>
        <div>
          <button 
            class="btn btn--secondary btn--smaller cursor-w-resize"
            style="cursor: w-resize;"
            title="{{ 'actions.previous' | t }}"
            {% if settings.enable_animations %}
              x-transition:enter="animation-300"
              x-transition:enter-start="opacity-0"
              x-transition:enter-end="opacity-100"
              x-transition:leave="animation-300"
              x-transition:leave-start="opacity-100"
              x-transition:leave-end="opacity-0"
            {% endif %}
            @click="scrollBack();">
            {% render 'component__icon', icon: 'chevron-left', size: '16', class: '' %}
          </button>
        </div>
        <div>
          <button 
            class="btn btn--secondary btn--smaller cursor-e-resize"
            style="cursor: e-resize;"
            title="{{ 'actions.next' | t }}"
            {% if settings.enable_animations %}
              x-transition:enter="animation-300"
              x-transition:enter-start="opacity-0"
              x-transition:enter-end="opacity-100"
              x-transition:leave="animation-300"
              x-transition:leave-start="opacity-100"
              x-transition:leave-end="opacity-0"
            {% endif %}
            @click="scrollNext();">
            {% render 'component__icon', icon: 'chevron-right', size: '16', class: '' %}
          </button>
        </div>
      </div>
    {% endunless %}
    
    {% comment %} Slides {% endcomment %}
    <div 
      class="
        whitespace-nowrap scroll-smooth hidescrollbar inline-flex w-full overflow-x-auto overflow-y-hidden md:snap-x md:snap-mandatory gap-4
        {{ container_class }}
      "
      style="
        {% unless enable_default_gap %}
          gap: {{ settings.gap_size }}px;
        {% endunless %}
        {% if section.settings.enable_margin %}
          padding-left: {{ settings.border_element_width }}px;
          padding-right: {{ settings.border_element_width }}px;
        {% else %}
          {% if settings.gap_size > 1 %}
            padding-left: {{ settings.gap_size }}px;
            padding-right: {{ settings.gap_size }}px;
          {% endif %}
        {% endif %}
        padding-top: {{ settings.border_element_width }}px;
        padding-bottom: {{ settings.border_element_width }}px;
      "
      x-ref="slider"
      x-init="
        setTimeout(function(){ 
          if (isOverflown($el)) show_arrows = true
        }, 400);
      ">
      {{ slides }}
    </div>

    {% comment %} Alternative arrows {% endcomment %}
    {% if enable_arrows_over %}
      <div 
        class="absolute left-0 z-10 justify-start hidden h-full -translate-y-1/2 opacity-0 pointer-events-auto md:flex top-1/2 group-hover:opacity-100 focus-within:opacity-100 animation-300 mix-blend-difference">
        <button 
          class="h-full !color__bg-transparent px-4 !border-0 cursor-w-resize !rounded-none"
          style="cursor: w-resize;"
          title="{{ 'actions.previous' | t }}"
          type="button"
          {% if settings.enable_animations %}
            x-transition:enter="animation-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="animation-300"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
          {% endif %}
          x-show="show_arrows"
          x-cloak
          @click="scrollBack();">
          <span 
            class="
              btn btn--smaller btn--outline-alt !p-0 !border-0 !cursor-w-resize
            ">
            {% render 'component__icon', icon: 'chevron-left', size: '16', class: '' %}
          </span>
        </button>
      </div>
      <div 
        class="absolute right-0 z-10 justify-end hidden h-full -translate-y-1/2 opacity-0 pointer-events-auto top-1/2 md:flex group-hover:opacity-100 focus-within:opacity-100 animation-300 mix-blend-difference">
        <button 
          class="h-full !color__bg-transparent px-4 !border-0 cursor-e-resize !rounded-none"
          style="cursor: e-resize;"
          type="button"
          title="{{ 'actions.next' | t }}"
          {% if settings.enable_animations %}
            x-transition:enter="animation-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="animation-300"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
          {% endif %}
          x-show="show_arrows"
          x-cloak
          @click="scrollNext();">
          <span 
            class="
              btn btn--smaller btn--outline-alt !p-0 !border-0 !cursor-e-resize
            ">
            {% render 'component__icon', icon: 'chevron-right', size: '16', class: '' %}
          </span>
        </button>
      </div>
    {% endif %}
    
    {% comment %} Indicators {% endcomment %}
    {% if enable_indicators and slider_size > 0 %}
      <div 
        class="
          absolute left-0 right-0 flex flex-wrap items-center justify-center gap-2 px-2 text-center mix-blend-difference z-10
          {% if enable_indicators_under %}
            top-full pt-2
          {% else %}
            bottom-0 pb-2
          {% endif %}
          {% unless enable_indicators_desktop %}
            md:hidden
          {% endunless %}
        ">
        {% for i in (0..slider_size) %}
          <button 
            class="w-2 h-1 bg-white opacity-25 animation-300--all border--radius" 
            :class="{ 
              '!opacity-100 !w-3': index === {{ i }} 
            }"
            tabindex="-1"
            type="button"
            aria-label="slider_button_{{ i }}" 
            @click="
              scrollToIndex({{ i }});
            ">
          </button>
        {% endfor %}
      </div>
    {% endif %}
    
  </div>
  
</div>