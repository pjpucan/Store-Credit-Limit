<!-- snippets/theme__scripts.liquid -->
{% comment %} 
  Site wide variables and JavaScript. 

  Usage:
    {% render 'theme__scripts' %}

  Globals: 
    - settings.cart_behavior: set the cart behavior to either 'drawer' or 'alert'
  
  Possible enhancements: 
    - Prepare help docs on editing JavaScript and include build files.

  Recommendations: 
    - Build files can be requested from theme support - hello@brickspacelab.com.
{% endcomment %}

<script>
  window.__initialData = window.__initialData || {};
  Object.assign(window.__initialData, {

    // Color
    // - Adjust the header when using a banner with an overlay + when using a section with color fade
    header_border: '', // {string} Color of the header border
    header_default_border: '', // {string} Default color of the header border
    header_overlay_border: '', // {string} Color for header border when banner has an overlay
    header_color: '', // {string} Color of the header
    header_default_color: '', // {string} Default color of the header
    header_overlay_color: '', // {string} Color of the header when banner has an overlay
    body_background_color: '#fff', // {string} Background color of the body
    body_text_color: '#fff', // {string} Text color of the body

    // Scroll
    is_scrolled: false, // {boolean} To toggle check direction of scroll
    is_scrolled_up: true, // {boolean} To toggle check if within 300px of top
    prev_scroll_pos: 0, // {number} Pprevious scroll position of the page
    show_scroll_up: false, // {boolean} To show the 'back to top' button
    has_overlay: false, // {boolean} To check if an overlay is active and adjust page

    // Audio
    click_audio: '{{ 'click.wav' | asset_url }}', // {string} URL for click sound
    success_audio: '{{ 'success.wav' | asset_url }}', // {string} URL for success sound
    enable_audio: {{ settings.enable_audio }}, // {boolean} To enable or disable audio
    
    // Error
    error_alert: false, // {boolean} To show the alert
    error_message: '', // {string} Error message

    // Discount
    discount_text: '', // {string} Text for the discount
    discount_code: '', // {string} Code for the discount
    
    // Pagination
    pagination_loading: false, // {boolean} To show loading state in pagination

    // Recent products
    recent_products: localStorage.getItem("recentlyViewedProducts") ? JSON.parse(localStorage.getItem("recentlyViewedProducts")) : [], // {array} Recently viewed products
    
    // Overlays
    age_overlay: localStorage.getItem("ageConfirmed") ? true : false, // {boolean} To toggle the age overlay
    audio_overlay: false, // {boolean} To toggle the audio settings overlay
    discount_overlay: false, // {boolean} To toggle the discount overlay
    filter_overlay: false, // {boolean} To toggle the filter overlay
    localization_overlay: false, // {boolean} To toggle the localization overlay
    quick_edit_handle: '', // {string} Set to the product handle of the product being edited
    
    // Header 
    header_group_height: 80, // {number} Height of the header group
    header_bar_height: 60, // {number} Height of the header bar
    has_banner_overlap: false, // {boolean} To check if there is a banner overlay
    
    // Menu
    menu_drawer: false, // {boolean} To toggle the menu drawer
    menu_nested: false, // {boolean} To check if the menu is nested

    // Product
    sticky_bar_height_left: 0, // {number} Height of the sticky bar
    sticky_bar_height_right: 0, // {number} Height of the sticky bar

    // Cart
    cart_drawer: false, // {boolean} To toggle the cart drawer
    cart_alert: false, // {boolean} To show the cart alert
    cart_loading: false, // {boolean} To check if the cart is loading
    cart_behavior_desktop: '{{ settings.cart_behavior_desktop }}', // {string} Behavior of the cart on desktop
    cart_behavior_mobile: '{{ settings.cart_behavior_mobile }}', // {string} Behavior of the cart on mobile
    cart: {
      items: [
        {% for item in cart.items %}
          {
            variant_id: {{ item.variant_id }}, // {number} Variant ID of the item
            final_price: {{ item.final_price }}, // {number} Final price of the item
            quantity: {{ item.quantity }}, // {number} Quantity of the item
            unit_price: 0, // {number} Unit price of the item
            unit_price_measurement: {} // {string} Measurement of the unit price
          },
        {% endfor %}
      ],
      note: '{{ cart.note }}', // {string} Note for the cart
      item_count: {{ cart.item_count }}, // {number} Count of items in the cart
      total_price: {{ cart.total_price }}, // {number} Total price of the cart
      original_total_price: {{ cart.original_total_price }}, // {number} Original total price of the cart
      total_discount: {{ cart.total_discount }}, // {number} Total discount of the cart
      progress_bar_delay_width: 0, // {number} Width of the delay bar in cart alerts
      progress_bar_remaining: 0, // {number} Remaining amount - e.g. 'Spend X more for free shipping'
      progress_bar_percent: '0%', // {string} Percent to reaching free shipping
    },

    // Search
    search_drawer: false, // {boolean} To toggle the search drawer
    search_loading: false, // {boolean} To check if the search is loading
    search_term: '', // {string} Term for the search
    search_items: [], // {array} Array of search items
    search_focus_index: '', // {string} Index of the focused search item
    search_focus_url: '', // {string} URL of the focused search item
    search_items_collections: [], // {array} Array of search items in collections
    search_items_pages: [], // {array} Array of search items in pages
    search_items_articles: [], // {array} Array of search items in articles
    search_items_queries: [], // {array} Array of search items in queries
  
    // Edit
    edit_variant: 0, // {number} Variant ID of old item when editing
    edit_quantity: 0, // {number} Quantity to use when editing
    
    // Prices
    price_format_with_currency: '{{ shop.money_format }}', // {string} Format for price with currency
    price_format_without_currency: '{{ shop.money_with_currency_format }}', // {string} Format for price without currency
    enable_zeros: {{ settings.enable_zeros }}, // {Boolean} Set to false to hide '.00'
    enable_currency: {{ settings.enable_currency }}, // {Boolean} Set to false to hide 'CAD'

  });
</script>

{% if template.directory == 'customers' %}
  <script src="{{ 'shopify_common.js' | shopify_asset_url }}" defer="defer"></script>
{% endif %}

{% render 'script__localization' %}
{% render 'script__recent-view' %}
{% render 'script__design-mode' %}